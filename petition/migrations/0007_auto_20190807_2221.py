# Generated by Django 2.2.4 on 2019-08-07 20:21

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from django.utils.text import slugify
from django.utils.html import mark_safe, strip_tags
import tinymce.models

import html


def createPytitionUsers(apps, schema_editor):
    PytitionUser = apps.get_model('petition', 'PytitionUser')
    User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
    for u in User.objects.all():
        print("Creating PU for User \'{}\'".format(u.username))
        if u.first_name == '' and u.last_name == '':
            u.first_name = u.username
        PytitionUser.objects.create(user=u)
        u.save()

def add_petitions_to_orgs_and_users(apps, schema_editor):
    print("we migrate existing petitions...")
    PytitionUser = apps.get_model('petition', 'PytitionUser')
    Petition = apps.get_model('petition', 'Petition')
    PetitionTemplate = apps.get_model('petition', 'PetitionTemplate')

    admin = PytitionUser.objects.filter(user__is_superuser=True).first()
    # Handle petitions and templates without owners
    for p in Petition.objects.all():
        print("we migration petition {}".format(p.id))
        if not p.user and not p.org:
            print("set user to admin")
            p.user = admin
            p.save(update_fields=['user'])
    for pt in PetitionTemplate.objects.all():
        if not pt.user and not pt.org:
            pt.user = admin
            pt.save(update_fields=['user'])

def slugify_petitions(apps, schema_editor):
    Petition = apps.get_model('petition', 'Petition')
    SlugModel = apps.get_model('petition', 'SlugModel')
    for p in Petition.objects.all():
        if p.slugmodel_set.count() == 0:
            raw_title = html.unescape(mark_safe(strip_tags(p.title).strip()))
            SlugModel.objects.create(slug=slugify(raw_title[:200]), petition=p)

def petition_title_strip_html(apps, schema_editor):
    Petition = apps.get_model('petition', 'Petition')
    for p in Petition.objects.all():
        p.title = strip_tags(p.title)
        p.save()


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('petition', '0006_auto_20181015_0851'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='Name')),
                ('slugname', models.SlugField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='PetitionTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('text', tinymce.models.HTMLField(blank=True)),
                ('side_text', tinymce.models.HTMLField(blank=True)),
                ('target', models.IntegerField(blank=True, null=True)),
                ('linear_gradient_direction', models.CharField(blank=True, choices=[('no gradient', 'no gradient'), ('to right', 'to right'), ('to bottom', 'to bottom'), ('to bottom right', 'to bottom right'), ('to bottom left', 'to bottom left')], default='no gradient', max_length=15)),
                ('gradient_from', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('gradient_to', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('bgcolor', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('footer_text', tinymce.models.HTMLField(blank=True)),
                ('footer_links', tinymce.models.HTMLField(blank=True)),
                ('twitter_description', models.CharField(blank=True, max_length=200)),
                ('twitter_image', models.CharField(blank=True, max_length=500)),
                ('has_newsletter', models.BooleanField(default=False)),
                ('newsletter_subscribe_http_data', models.TextField(blank=True)),
                ('newsletter_subscribe_http_mailfield', models.CharField(blank=True, max_length=100)),
                ('newsletter_subscribe_http_url', models.CharField(blank=True, max_length=1000)),
                ('newsletter_subscribe_mail_subject', models.CharField(blank=True, max_length=1000)),
                ('newsletter_subscribe_mail_from', models.EmailField(blank=True, max_length=500)),
                ('newsletter_subscribe_mail_to', models.EmailField(blank=True, max_length=500)),
                ('newsletter_subscribe_method', models.CharField(choices=[('MAIL', 'MAIL'), ('POST', 'POST'), ('GET', 'GET')], default='MAIL', max_length=4)),
                ('newsletter_subscribe_mail_smtp_host', models.CharField(blank=True, default='localhost', max_length=100)),
                ('newsletter_subscribe_mail_smtp_port', models.IntegerField(default=25)),
                ('newsletter_subscribe_mail_smtp_user', models.CharField(blank=True, max_length=200)),
                ('newsletter_subscribe_mail_smtp_password', models.CharField(blank=True, max_length=200)),
                ('newsletter_subscribe_mail_smtp_tls', models.BooleanField(default=False)),
                ('newsletter_subscribe_mail_smtp_starttls', models.BooleanField(default=False)),
                ('org_twitter_handle', models.CharField(blank=True, max_length=20)),
                ('newsletter_text', models.CharField(blank=True, max_length=1000)),
                ('sign_form_footer', models.TextField(blank=True)),
                ('confirmation_email_sender', models.EmailField(blank=True, max_length=100)),
                ('confirmation_email_smtp_host', models.CharField(blank=True, default='localhost', max_length=100)),
                ('confirmation_email_smtp_port', models.IntegerField(blank=True, default=25)),
                ('confirmation_email_smtp_user', models.CharField(blank=True, max_length=200)),
                ('confirmation_email_smtp_password', models.CharField(blank=True, max_length=200)),
                ('confirmation_email_smtp_tls', models.BooleanField(default=False)),
                ('confirmation_email_smtp_starttls', models.BooleanField(default=False)),
                ('use_custom_email_settings', models.BooleanField(default=False)),
                ('org', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.Organization')),
            ],
        ),
        migrations.RemoveField(
            model_name='petition',
            name='background',
        ),
        migrations.RemoveField(
            model_name='petition',
            name='mobile_background',
        ),
        migrations.RemoveField(
            model_name='petition',
            name='top_picture',
        ),
        migrations.AddField(
            model_name='petition',
            name='salt',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='petition',
            name='use_custom_email_settings',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='signature',
            name='ipaddress',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='petition',
            name='confirmation_email_sender',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='petition',
            name='confirmation_email_smtp_host',
            field=models.CharField(blank=True, default='localhost', max_length=100),
        ),
        migrations.AlterField(
            model_name='petition',
            name='confirmation_email_smtp_port',
            field=models.IntegerField(blank=True, default=25),
        ),
        migrations.AlterField(
            model_name='petition',
            name='footer_text',
            field=tinymce.models.HTMLField(blank=True),
        ),
        migrations.AlterField(
            model_name='petition',
            name='newsletter_subscribe_mail_smtp_host',
            field=models.CharField(blank=True, default='localhost', max_length=100),
        ),
        migrations.AlterField(
            model_name='petition',
            name='newsletter_subscribe_mail_smtp_port',
            field=models.IntegerField(blank=True, default=25),
        ),
        migrations.AlterField(
            model_name='petition',
            name='org_twitter_handle',
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AlterField(
            model_name='petition',
            name='text',
            field=tinymce.models.HTMLField(blank=True),
        ),
        migrations.AlterField(
            model_name='petition',
            name='title',
            field=models.TextField(verbose_name='Title'),
        ),
        migrations.CreateModel(
            name='SlugModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=200)),
                ('petition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='petition.Petition')),
            ],
        ),
        migrations.CreateModel(
            name='PytitionUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='petition.PetitionTemplate', verbose_name='Default petition template')),
                ('invitations', models.ManyToManyField(blank=True, related_name='invited', to='petition.Organization')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pytitionuser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='petitiontemplate',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.PytitionUser'),
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_add_members', models.BooleanField(default=False)),
                ('can_remove_members', models.BooleanField(default=False)),
                ('can_create_petitions', models.BooleanField(default=True)),
                ('can_modify_petitions', models.BooleanField(default=True)),
                ('can_delete_petitions', models.BooleanField(default=False)),
                ('can_create_templates', models.BooleanField(default=True)),
                ('can_modify_templates', models.BooleanField(default=True)),
                ('can_delete_templates', models.BooleanField(default=False)),
                ('can_view_signatures', models.BooleanField(default=False)),
                ('can_modify_signatures', models.BooleanField(default=False)),
                ('can_delete_signatures', models.BooleanField(default=False)),
                ('can_modify_permissions', models.BooleanField(default=False)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='petition.Organization', verbose_name='Organization related to these permissions')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='petition.PytitionUser', verbose_name='User related to these permissions')),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='default_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='petition.PetitionTemplate', verbose_name='Default petition template'),
        ),
        migrations.AddField(
            model_name='organization',
            name='members',
            field=models.ManyToManyField(through='petition.Permission', to='petition.PytitionUser'),
        ),
        migrations.AddField(
            model_name='petition',
            name='org',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.Organization'),
        ),
        migrations.AddField(
            model_name='petition',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.PytitionUser'),
        ),
        migrations.RunPython(
            code=createPytitionUsers,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=add_petitions_to_orgs_and_users,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=slugify_petitions,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=petition_title_strip_html,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
    ]
